// Import necessary libraries
use solana_program::{
    account_info::AccountInfo, entrypoint, entrypoint::ProgramResult, pubkey::Pubkey, program,
    program_pack::Pack, system_instruction,
};

// Define contract data structure
#[repr(C)]
pub struct LiquidityPool {
    pub owner: Pubkey,
    pub token_account: Pubkey, // Token account
    pub total_liquidity: u64,
    pub user_balances: Vec<(Pubkey, u64)>, // Track individual user balances
}

// Program entry point
#[entrypoint]
fn process_instruction(program_id: &Pubkey, accounts: &[AccountInfo], instruction_data: &[u8]) -> ProgramResult {
    // Parse account information
    let accounts_iter = &mut accounts.iter();
    let pool_account = next_account_info(accounts_iter)?;

    // Check if the correct program owns the contract
    if pool_account.owner != program_id {
        return Err(solana_program::program_error::ProgramError::IncorrectProgramId);
    }

    // Parse contract data
    let mut pool_data = LiquidityPool::unpack(&pool_account.data.borrow())?;
    
    // Handle different operations based on the instruction
    match instruction_data[0] {
        0 => {
            // Operation: Provide liquidity
            provide_liquidity(accounts_iter, &mut pool_data, instruction_data)?;
        },
        1 => {
            // Operation: Withdraw liquidity
            withdraw_liquidity(accounts_iter, &mut pool_data, instruction_data)?;
        },
        _ => {
            // Invalid operation
            return Err(solana_program::program_error::ProgramError::InvalidInstructionData);
        }
    }

    // Update contract data
    LiquidityPool::pack(pool_data, &mut pool_account.data.borrow_mut())?;

    Ok(())
}

// Helper function: Provide liquidity
fn provide_liquidity<'a, 'b>(
    accounts_iter: &mut impl Iterator<Item = &'a AccountInfo<'b>>,
    pool_data: &mut LiquidityPool,
    instruction_data: &[u8],
) -> ProgramResult {
    let user_account = next_account_info(accounts_iter)?;
    let amount = u64::from_le_bytes(instruction_data[1..9].try_into().unwrap());

    // Check if the user provided enough funds
    let user_token_account = next_account_info(accounts_iter)?;
    let token_balance = user_token_account.try_borrow_data()?;
    let user_balance = u64::from_le_bytes(token_balance[0..8].try_into().unwrap());

    if user_balance < amount {
        return Err(solana_program::program_error::ProgramError::InsufficientFunds);
    }

    // Transfer funds to the contract account
    let transfer_ix = system_instruction::transfer(user_account.key, &pool_data.token_account, amount);
    solana_program::program::invoke(&[transfer_ix], accounts_iter)?;

    // Update user balance or add new entry
    if let Some(user_balance_entry) = pool_data.user_balances.iter_mut().find(|(user, _)| user == &user_account.key) {
        user_balance_entry.1 += amount;
    } else {
        pool_data.user_balances.push((user_account.key, amount));
    }

    // Update total liquidity
    pool_data.total_liquidity += amount;

    Ok(())
}

// Helper function: Withdraw liquidity
fn withdraw_liquidity<'a, 'b>(
    accounts_iter: &mut impl Iterator<Item = &'a AccountInfo<'b>>,
    pool_data: &mut LiquidityPool,
    instruction_data: &[u8],
) -> ProgramResult {
    let user_account = next_account_info(accounts_iter)?;
    let amount = u64::from_le_bytes(instruction_data[1..9].try_into().unwrap());

    // Check if the user has enough liquidity
    if let Some(user_balance_entry) = pool_data.user_balances.iter_mut().find(|(user, _)| user == &user_account.key) {
        if user_balance_entry.1 < amount {
            return Err(solana_program::program_error::ProgramError::InsufficientFunds);
        }

        // Transfer funds to the user account
        let transfer_ix = system_instruction::transfer(&pool_data.token_account, user_account.key, amount);
        solana_program::program::invoke(&[transfer_ix], accounts_iter)?;

        // Update user balance
        user_balance_entry.1 -= amount;

        // Update total liquidity
        pool_data.total_liquidity -= amount;
    } else {
        // User not found in user_balances
        return Err(solana_program::program_error::ProgramError::InvalidAccountData);
    }

    Ok(())
}

// Helper function: Parse account information
fn next_account_info<'a, 'b>(
    iter: &mut impl Iterator<Item = &'a AccountInfo<'b>>,
) -> Result<&'a AccountInfo<'b>, ProgramResult> {
    iter.next().ok_or_else(|| solana_program::program_error::ProgramError::NotEnoughAccountKeys)
}

// Helper function: Pack contract data into storage space
impl Pack for LiquidityPool {
    const LEN: usize = 32;

    fn unpack_from_slice(src: &[u8]) -> Result<Self, solana_program::program_error::ProgramError> {
        let owner = Pubkey::new_from_array(<[u8; 32]>::try_from(&src[0..32]).unwrap());
        let token_account = Pubkey::new_from_array(<[u8; 32]>::try_from(&src[32..64]).unwrap());
        let total_liquidity = u64::from_le_bytes(src[64..72].try_into().unwrap());
        
        let mut user_balances = Vec::new();
        let mut offset = 72;
        while offset + 40 <= src.len() {
            let user = Pubkey::new_from_array(<[u8; 32]>::try_from(&src[offset..offset + 32]).unwrap());
            let balance = u64::from_le_bytes(src[offset + 32..offset + 40].try_into().unwrap());
            user_balances.push((user, balance));
            offset += 40;
        }

        Ok(LiquidityPool {
            owner,
            token_account,
            total_liquidity,
            user_balances,
        })
    }

    fn pack_into_slice(&self, dst: &mut [u8]) {
        dst[0..32].copy_from_slice(&self.owner.to_bytes());
        dst[32..64].copy_from_slice(&self.token_account.to_bytes());
        dst[64..72].copy_from_slice(&self.total_liquidity.to_le_bytes());

        let mut offset = 72;
        for (user, balance) in &self.user_balances {
            dst[offset..offset + 32].copy_from_slice(&user.to_bytes());
            dst[offset + 32..offset + 40].copy_from_slice(&balance.to_le_bytes());
            offset += 40;
        }
    }
}
